# Generated by Django 2.2.7 on 2019-12-25 20:56

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('predictive_model', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Classification',
            fields=[
                ('predictivemodel_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='predictive_model.PredictiveModel')),
            ],
            options={
                'abstract': False,
            },
            bases=('predictive_model.predictivemodel',),
        ),
        migrations.CreateModel(
            name='AdaptiveHoeffdingTree',
            fields=[
                ('classification_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='classification.Classification')),
                ('grace_period', models.PositiveIntegerField()),
                ('split_criterion', models.CharField(choices=[('gini', 'gini'), ('info_gain', 'info_gain')], default='uniform', max_length=10)),
                ('split_confidence', models.FloatField()),
                ('tie_threshold', models.FloatField()),
                ('remove_poor_atts', models.BooleanField()),
                ('leaf_prediction', models.CharField(choices=[('mc', 'mc'), ('nb', 'nb'), ('nba', 'nba')], default='uniform', max_length=4)),
                ('nb_threshold', models.FloatField()),
            ],
            options={
                'abstract': False,
            },
            bases=('classification.classification',),
        ),
        migrations.CreateModel(
            name='DecisionTree',
            fields=[
                ('classification_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='classification.Classification')),
                ('max_depth', models.PositiveIntegerField(null=True)),
                ('min_samples_split', models.PositiveIntegerField()),
                ('min_samples_leaf', models.PositiveIntegerField()),
            ],
            options={
                'abstract': False,
            },
            bases=('classification.classification',),
        ),
        migrations.CreateModel(
            name='HoeffdingTree',
            fields=[
                ('classification_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='classification.Classification')),
                ('grace_period', models.PositiveIntegerField()),
                ('split_criterion', models.CharField(choices=[('gini', 'gini'), ('info_gain', 'info_gain')], default='uniform', max_length=10)),
                ('split_confidence', models.FloatField()),
                ('tie_threshold', models.FloatField()),
                ('remove_poor_atts', models.BooleanField()),
                ('leaf_prediction', models.CharField(choices=[('mc', 'mc'), ('nb', 'nb'), ('nba', 'nba')], default='uniform', max_length=4)),
                ('nb_threshold', models.FloatField()),
            ],
            options={
                'abstract': False,
            },
            bases=('classification.classification',),
        ),
        migrations.CreateModel(
            name='Knn',
            fields=[
                ('classification_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='classification.Classification')),
                ('n_neighbors', models.PositiveIntegerField()),
                ('weights', models.CharField(choices=[('uniform', 'uniform'), ('distance', 'distance')], default='uniform', max_length=9)),
            ],
            options={
                'abstract': False,
            },
            bases=('classification.classification',),
        ),
        migrations.CreateModel(
            name='NaiveBayes',
            fields=[
                ('classification_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='classification.Classification')),
                ('alpha', models.FloatField()),
                ('fit_prior', models.BooleanField()),
            ],
            options={
                'abstract': False,
            },
            bases=('classification.classification',),
        ),
        migrations.CreateModel(
            name='NeuralNetwork',
            fields=[
                ('classification_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='classification.Classification')),
                ('n_hidden_layers', models.PositiveIntegerField()),
                ('n_hidden_units', models.PositiveIntegerField()),
                ('activation', models.CharField(choices=[('sigmoid', 'sigmoid'), ('tanh', 'tanh'), ('relu', 'relu')], default='relu', max_length=8)),
                ('n_epochs', models.PositiveIntegerField()),
                ('dropout_rate', models.PositiveIntegerField()),
            ],
            options={
                'abstract': False,
            },
            bases=('classification.classification',),
        ),
        migrations.CreateModel(
            name='Perceptron',
            fields=[
                ('classification_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='classification.Classification')),
                ('penalty', models.CharField(choices=[('l1', 'l1'), ('l2', 'l2'), ('elasticnet', 'elasticnet')], default='l1', max_length=11, null=True)),
                ('alpha', models.FloatField()),
                ('fit_intercept', models.BooleanField()),
                ('tol', models.FloatField()),
                ('shuffle', models.BooleanField()),
                ('eta0', models.PositiveIntegerField()),
                ('validation_fraction', models.FloatField()),
                ('n_iter_no_change', models.PositiveIntegerField()),
            ],
            options={
                'abstract': False,
            },
            bases=('classification.classification',),
        ),
        migrations.CreateModel(
            name='RandomForest',
            fields=[
                ('classification_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='classification.Classification')),
                ('n_estimators', models.PositiveIntegerField()),
                ('max_depth', models.PositiveIntegerField(null=True)),
                ('max_features', models.CharField(default='auto', max_length=10, null=True)),
            ],
            options={
                'abstract': False,
            },
            bases=('classification.classification',),
        ),
        migrations.CreateModel(
            name='SGDClassifier',
            fields=[
                ('classification_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='classification.Classification')),
                ('loss', models.CharField(choices=[('hinge', 'hinge'), ('log', 'log'), ('modified_huber', 'modified_huber'), ('squared_hinge', 'squared_hinge'), ('perceptron', 'perceptron'), ('squared_loss', 'squared_loss'), ('huber', 'huber'), ('epsilon_insensitive', 'epsilon_insensitive'), ('squared_epsilon_insensitive', 'squared_epsilon_insensitive')], default='uniform', max_length=28)),
                ('penalty', models.CharField(choices=[('l1', 'l1'), ('l2', 'l2'), ('elasticnet', 'elasticnet')], default='l1', max_length=11, null=True)),
                ('alpha', models.FloatField()),
                ('l1_ratio', models.FloatField()),
                ('fit_intercept', models.BooleanField()),
                ('tol', models.FloatField()),
                ('epsilon', models.FloatField()),
                ('learning_rate', models.CharField(choices=[('constant', 'constant'), ('optimal', 'optimal'), ('invscaling', 'invscaling'), ('adaptive', 'adaptive')], default='constant', max_length=11)),
                ('eta0', models.PositiveIntegerField()),
                ('power_t', models.FloatField()),
                ('n_iter_no_change', models.PositiveIntegerField()),
                ('validation_fraction', models.FloatField()),
                ('average', models.BooleanField()),
            ],
            options={
                'abstract': False,
            },
            bases=('classification.classification',),
        ),
        migrations.CreateModel(
            name='XGBoost',
            fields=[
                ('classification_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='classification.Classification')),
                ('n_estimators', models.PositiveIntegerField()),
                ('max_depth', models.PositiveIntegerField()),
            ],
            options={
                'abstract': False,
            },
            bases=('classification.classification',),
        ),
    ]
